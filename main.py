import asyncio
import aiohttp
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_TELEGRAM_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞
TOKEN = '8047668775:AAFD3Gvnl5OtkxkjkbJK7mzjlmq4tqRJ-BcYOUR_TELEGRAM_BOT_TOKEN'
CHAT_ID = '@NewS_it_qwedfghnm_bot'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
URL = 'https://www.ixbt.com/news/'

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
latest_news = {}


async def fetch_html(url):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    """
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            return await response.text()


async def get_latest_news():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Å–∞–π—Ç–∞ iXBT.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.
    """
    html = await fetch_html(URL)
    soup = BeautifulSoup(html, 'html.parser')

    news_list = []
    articles = soup.select('div[itemprop="itemListElement"]')

    for article in articles:
        title = article.select_one('a[itemprop="url"]').text.strip()
        link = article.select_one('a[itemprop="url"]')['href']
        full_link = f"https://www.ixbt.com{link}"

        if title not in latest_news:  # –ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç—å –Ω–æ–≤–∞—è
            latest_news[title] = full_link  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            news_list.append({'title': title, 'link': full_link})

    return news_list


async def send_news(news):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ Telegram.
    """
    for item in news:
        message = f"üì∞ {item['title']}\n{item['link']}"
        await bot.send_message(CHAT_ID, message)


async def news_checker():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö –≤ Telegram.
    """
    while True:
        latest_news_list = await get_latest_news()
        if latest_news_list:  # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            await send_news(latest_news_list)
        await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–π—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.
    """
    await message.reply("–ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π iXBT –∑–∞–ø—É—â–µ–Ω! üì∞")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π
    asyncio.create_task(news_checker())


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
